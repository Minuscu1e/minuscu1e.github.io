<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>文章 on Minusuc1e</title><link>/blog/</link><description>Recent content in 文章 on Minusuc1e</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Fri, 13 Oct 2023 00:00:00 -0400</lastBuildDate><atom:link href="/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>避免洪水泛滥</title><link>/blog/code-2023-10-13/</link><pubDate>Fri, 13 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/code-2023-10-13/</guid><description>你的国家有无数个湖泊，所有湖泊一开始都是空的。当第 n 个湖泊下雨前是空的，那么它就会装满水。如果第 n 个湖泊下雨前是 满的 ，这个湖泊会发生 洪水 。你的目标是避免任意一个湖泊发生洪水。</description></item><item><title>老人的数目</title><link>/blog/code-2023-10-23/</link><pubDate>Fri, 13 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/code-2023-10-23/</guid><description>给你一个下标从 0 开始的字符串 details 。details 中每个元素都是一位乘客的信息，信息用长度为 15 的字符串表示，表示方式如下：
前十个字符是乘客的手机号码。 接下来的一个字符是乘客的性别。 接下来两个字符是乘客的年龄。 最后两个字符是乘客的座位号。 请你返回乘客中年龄 严格大于 60 岁 的人数。 思路 在第 11 位 和 12 位存储着乘客的年纪信息，固定从该位置取然后计算即可。</description></item><item><title>Nginx + Http2</title><link>/blog/post-2023-10-12_1/</link><pubDate>Thu, 12 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/post-2023-10-12_1/</guid><description>环境准备 系统环境： Centos/Windows Nginx：1.25.1 编译 nginx Windows 在 Windows 环境下，直接下载官网编译好的版本即可。</description></item><item><title>MySQL InnoDB 中的锁</title><link>/blog/post-2023-10-11_1/</link><pubDate>Wed, 11 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/post-2023-10-11_1/</guid><description>目录 什么是锁？ InnoDB 中的锁 锁的类型 实践出真理 一致性非锁定读 什么是锁？ 锁是数据库系统区别于文件系统的一个关键特性。数据库系统使用锁是为了支持对共享资源进行并发访问、提供数据的完整性和一致性。</description></item><item><title>旋转矩阵</title><link>/blog/code-2023-10-12/</link><pubDate>Wed, 11 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/code-2023-10-12/</guid><description>给你一幅由 N × N 矩阵表示的图像，其中每个像素的大小为 4 字节。请你设计一种算法，将图像旋转 90 度。 不占用额外内存空间能否做到？</description></item><item><title>一次编辑</title><link>/blog/code-2023-10-11/</link><pubDate>Tue, 10 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/code-2023-10-11/</guid><description>字符串有三种编辑操作:插入一个英文字符、删除一个英文字符或者替换一个英文字符。 给定两个字符串，编写一个函数判定它们是否只需要一次(或者零次)编辑。
思路 其实删除和插入在本质上是一种操作，插入是对短的字符串进行添加而删除则是对长的字符串进行移除。那么假设我们始终对长的进行操作，那么这道题中只有两种情况：删除和替换。 替换可以看做是一种在两个字符串下的特殊情况。 最后需要判断一下两个指针是否都走到末尾 代码实现 class Solution { public boolean oneEditAway(String first, String second) { if (first.</description></item><item><title>移动机器人</title><link>/blog/code-2023-10-10/</link><pubDate>Mon, 09 Oct 2023 00:00:00 -0400</pubDate><guid>/blog/code-2023-10-10/</guid><description>有一些机器人分布在一条无限长的数轴上，他们初始坐标用一个下标从 0 开始的整数数组 nums 表示。当你给机器人下达命令时，它们以每秒钟一单位的速度开始移动。 给你一个字符串 s ，每个字符按顺序分别表示每个机器人移动的方向。&amp;lsquo;L&amp;rsquo; 表示机器人往左或者数轴的负方向移动，&amp;lsquo;R&amp;rsquo; 表示机器人往右或者数轴的正方向移动。 当两个机器人相撞时，它们开始沿着原本相反的方向移动。 请你返回指令重复执行 d 秒后，所有机器人之间两两距离之和。由于答案可能很大，请你将答案对 109 + 7 取余后返回。</description></item></channel></rss>